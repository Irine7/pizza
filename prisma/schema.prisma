generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("POSTGRES_URL")
	directUrl = env("POSTGRES_URL_NON_POOLING") 
}

enum OrderStatus {
	Pending
	Completed
	Canceled
}

enum UserRole {
	Admin
	User
}

model Cart {
	id    Int @id @default(autoincrement())
	userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
	totalAmount Int @default(0)
	token String // Токен для неавторизованных пользователей
	items CartItem[]

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model CartItem {
	id    Int @id @default(autoincrement())
	productItem ProductItem @relation(fields: [productItemID], references: [id])
	productItemID Int
	cart Cart @relation(fields: [cartId], references: [id])
	cartId Int
	quantity Int 
	// Дополнительные ингредиенты:
	ingredients Ingredient[]	

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Category {
	id    Int @id @default(autoincrement())
	name  String @unique
	products Product[]

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Ingredient {
	id    Int @id @default(autoincrement())
	name  String
	price Int
	imageUrl String
	products Product[]
	cartItems CartItem[]

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Product {
	id    Int @id @default(autoincrement())
	name  String
	imageUrl String
	// Связь с Category по categoryId (внешний ключ):
	category Category @relation(fields: [categoryId], references: [id])
	categoryId Int 
	// Связь с Ingredient по ingredientId many to many (внешний ключ): 
	ingredients Ingredient[]
	// Связь с ProductItem по productId (внешний ключ): 
	items ProductItem[] // Вариации товара

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt	
}

model ProductItem {
	id    Int @id @default(autoincrement())
	price Int
	size  Int?
	pizzaType Int?
	product Product @relation(fields: [productId], references: [id])
	productId Int
	cartItems CartItem[]

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Order {
	id    Int @id @default(autoincrement())
	user User? @relation(fields: [userId], references: [id])
	userId Int?
	token String 
	totalAmount Int
	status OrderStatus
	paymentId String? // ID платежа
	items Json
	fullName String
	address String
	phone String
	email String	
	comment String

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model VerificationCode {
	id    Int @id @default(autoincrement())
	user User @relation(fields: [userId], references: [id])
	userId Int @unique
	code String @unique

	createdAt DateTime @default(now())
	@@unique([userId, code])
}

model User {
	id    Int @id @default(autoincrement())
	fullName String
	email  String @unique
	password String
	role UserRole @default(User)
	verified DateTime
	cart Cart?
	orders Order[]
	verificationCode VerificationCode?
	provider String? // Через какую соцсеть юзер зарегистрировался 
	providerId String?

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}
